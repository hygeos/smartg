[build-system]
build-backend = "setuptools.build_meta"
requires = ["setuptools>=42"]

[project]
name = "smartg"
version = "1.1.0.dev2"
description = """
SMART-G (Speed-up Monte Carlo Advanced Radiative Transfer Code using GPU) is a radiative \
transfer code using a Monte-Carlo technique to simulate the propagation of the polarized \
light in the atmosphere and/or ocean, and using GPU acceleration."""
authors = [
    {name = "Didier Ramon", email = "dr@hygeos.com"},
    {name = "Mustapha Moulana", email = "mm@hygeos.com"},
    {name = "François Steinmetz", email = "fs@hygeos.com"},
    {name = "Dominique Jolivet", email = "dj@hygeos.com"},
    {name = "Mathieu Compiègne", email = "mc@hygeos.com"}
]
readme = "README.md"
classifiers = [
    'Development Status :: 5 - Production/Stable',
    'License :: Free for non-commercial use',
    'License :: Other/Proprietary License',
    'Intended Audience :: Science/Research',
    'Intended Audience :: Developers',
    'Programming Language :: Python',
    'Programming Language :: Python :: 3.10',
    'Programming Language :: Python :: 3.11',
    'Programming Language :: Python :: 3.12',
    'Programming Language :: Python :: 3.13',
    'Topic :: Scientific/Engineering'
]
requires-python = ">= 3.10,< 3.14"
dependencies = [
    "numpy", 
    "pandas", 
    "scipy", 
    "h5py", 
    "pyarrow", 
    "openpyxl", 
    "progressbar2", 
    "matplotlib", 
    "python-dotenv",
    "notebook",
    "ipywidgets",
    "ipympl",
    "pyhdf",
    "pycuda",
    "geoclide",
    "luts @ git+https://github.com/hygeos/luts.git",
    "hitran-api"
]

[project.optional-dependencies]
test = [
    "pytest",
    "pytest-xdist",
    "pytest-html",
    "papermill"
]
extra = [
    "gatiab",
    "statsmodels",
    "jax[cuda12]"
]


[project.urls]
Source = "https://github.com/hygeos/smartg"

[tool.setuptools]
packages = ["smartg"]

# **** pixi configuration ****
[tool.pixi.workspace]
channels = ["conda-forge"]
platforms = ["linux-64"]

[tool.pixi.pypi-dependencies]
smartg = { path = ".", editable = true }

[tool.pixi.environments]
# pixi shell # default environment
# pixi shell --environment extra # environment with extra dependencies
default = { features = ["test"], solve-group = "default" }
extra = { features = ["test", "extra"], solve-group = "default" }

[tool.pixi.tasks]
# pixi run test-basic
test-basic = """
pytest smartg/tests/test_cuda.py smartg/tests/test_profile.py
smartg/tests/test_smartg.py -s -v"""
test-all = "pytest smartg/tests/ -s -v"
